library("swirl")
swirl()
swirl()
quit
swirl()
x <- c(44,na,5,na)
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x(1:10)
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(1:7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11,bar=2,norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- names(vect)
play()
vect2
names(vect2) <- names(vect)
vect2
nxt()
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?"matrix"
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
?cbind
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
colnames(cnames,my_data)
?colnames
colnames(my_data) <- cnames
my_data
true == TRUE
TRUE == TRUE
(FALSE == TRUE) == FALSE
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
swirl()
Sys.Date()
skip()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(1,5,10))
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(median,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[3]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("go","away")
submit()
submit()
skip()
skip()
mad_libs(adjective = "", place = "", noun = "")
skip()
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
play()
as.list(flags)
nxt()
cls_list <- lappy(flags,class)
install.packages("lappy")
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,
19:23]
lappy(flag_shapes,range)
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
skip()
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2]
)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags&animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
exit()
quit()
quit()
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
nclol(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 4)
10
sample(1:20, 10)
?LETTERS
LETTERS()
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),replce = true,prob = c(0.3,0.7))
flips <- sample(c(0,1),replce = TRUE,prob = c(0.3,0.7))
flips <- sample(c(0,1),replace = TRUE,prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100, prob = 0.7)
flips2 <- rbinom(100, size=100, prob=.7)
flips2 <- rbinom(100, size=100, prob=0.7)
flips2 <- rbinom(n=100, size=100, prob=0.7)
info()
skip()
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d11)
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass()
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986"
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H;%M")
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time(t1)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units="days")
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plto
?plot
plot(cars$speed, cars$dist)
plot(cars$dist,cars$speed)
plot(cars$dist,cars$speed, "speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subutitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
mtcars
data("mtcars")
data(mtcars)
?boxplot
boxplot(cars, mpg ~ cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install_from_swirl("Data Analysis")
quit()
updateR()
update()
install.packages(installr)
install.packages("installr")
updateR()
library(installr)
updateR()
installr::updateR()
1/inf
1/Inf
1/0
y <- c("a",TRUE)
y
y <- c(4,TRUE)
y
library(datasets)
data("iris")
ls()
head(iris)
x <- tapply(iris$Sepal.Length, iris$Species, mean)
x
data("mtcars")
head(mtcars)
y <- tapply(mtcars$hp,mtcars$cyl,mean)
y
y[3]-y[1]
setwd("F:/Coursera_Data_science/R Programming/assing2")
rm(list = rm())
rm(list = ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
myVector <- makeVector()
myVector
myVector <- makeVector(c(1,2,3))
myVector
myVector(get())
get()
myVector$get()
myVector$getmean()
myVector$setmean()
myVector$getmean()
x$get()
myVector$get()
setwd("F:/Coursera_Data_science/R Programming")
setwd("F:/Coursera_Data_science/R Programming/assing2")
dir()
source("cashematrix.R")
source(cashematrix.R)
source("cachematrix.R")
mtx <- matrix()
mtx
mtx <- matrix(nrow = 4,ncol = 1)
mtx <- matrix(nrow = 4,ncol = 4)
mtx
mtx <- matrix(1:16, nrow = 4,ncol = 1)
mtx
mtx <- matrix(data = 1:16, nrow = 4,ncol = 1)
mtx
mtx <- matrix(data = 1:16, nrow = 4,ncol = 4)
mtx
solve(mtx)
mtx <- matrix(sample(1:100,16), nrow = 4,ncol = 4)
mtx
solve(mtx)
origSolve <- solve(mtx)
casheSolve(mtx)
cacheSolve(mtx)
source("cachematrix.R")
cacheSolve(mtx)
source("cachematrix.R")
cacheSolve(mtx)
machMtx <- makeCacheMatrix(mtx)
machMtx
machMtx$get()
rm(machMtx)
source("cachematrix.R")
cachMtx <- makeCacheMatrix(mtx)
cachMtx$get()
source("cachematrix.R")
cachMtx$get()
rm(cachMtx)
cachMtx <- makeCacheMatrix(mtx)
cachMtx$get()
cachMtx$get()
source("cachematrix.R")
cachMtx <- makeCacheMatrix(mtx)
cachMtx$get()
cacheSolve(cachMtx)
cachMtx$getInv()
origSolve
cacheSolve(cachMtx)
class(cachMtx)
class(mtx)
class(cachMtx)
typeof(cachMtx)
methods(cachMtx)
mtx
cacheSolve(mtx)
cachMtx$get()
cachMtx <- makeCacheMatrix(mtx)
cacheSolve(cachMtx)
cacheSolve(cachMtx)
source("cachematrix.R")
mtx <- matrix(sample(1:100,16), nrow = 4,ncol = 4)
mtx
makeCacheMatrix(mtx)
cachMtx <- makeCacheMatrix(mtx)
machMtx
cachMtx
cachMtx$get()
cacheSolve(cachMtx)
source("cachematrix.R")
cacheSolve(cachMtx)
cachMtx$setInv(NULL)
cachMtx$getInv()
cacheSolve(cachMtx)
